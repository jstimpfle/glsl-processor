This is a preprocessor for GLSL, work in progress.

Its goal is to be used in build scripts to generate interfaces to GLSL shaders
(as used in OpenGL).

It's written in pure C and weighs only about 2000 lines. Thus it should be
relatively easy to change.

Building
--------

Run "make" to compile the file under src/ to produce the program
"./glsl-processor" in the repository's root directory.

That executable has the file src/main.c compiled in, which is currently just
some test code. It is set up so that it feeds the shaders under
example-shaders/ into the pipeline and generates some C files under
autogenerated/.

What you can do if you want to use the code for real, is to write a replacement
for src/main.c that feeds in your data instead.

TODO
----

 - Preprocess shaders by auto-generating interfaces to other GLSL shaders and
prepending them to the source code. The idea is that you shouldn't need to
duplicate declarations for uniforms, attributes, or functions that are shared
between multiple shaders that get linked into a single program. Instead, we want
to prepend to each shader all the external attributes and uniforms from the
shaders that they're linked with, provided that these can be uniquely
determined (shaders can be used as part of multiple programs).

Having an explicit #include directive would be another option, but that would
mean more typing work, the need to invent a name for the interface, possibly
the need to make interfaces explicitly, and would also require a GLSL language
extension. That's why I first want to try if the automatic approach is
practical.
